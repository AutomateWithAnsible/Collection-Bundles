- name: Look for the configured cloud to be returned
  os_client_config:
    clouds:
      - "{{ molecule_openstack_ci_cloud }}"
  failed_when: (openstack.clouds | length) != 1

- name: Set the cloud fact
  set_fact:
    _cloud: "{{ openstack.clouds[0] }}"

# These tasks attempt to mirror the same tasks generated by
# "molecule init scenario -d openstack ..."
- name: Create security group for scenario
  os_security_group:
    cloud: "{{ molecule_openstack_ci_cloud }}"
    name: "{{ molecule_openstack_ci_security_group_name }}"
    description: "{{ molecule_openstack_ci_security_group_description }}"
  register: security_group

- name: Create security group rules
  os_security_group_rule:
    cloud: "{{ molecule_openstack_ci_cloud }}"
    security_group: "{{ molecule_openstack_ci_security_group_name }}"
    protocol: "{{ item.proto | default(omit) }}"
    port_range_min: "{{ item.port | default(omit) }}"
    port_range_max: "{{ item.port | default(omit) }}"
    remote_ip_prefix: "{{ item.cidr | default(omit) }}"
    remote_group: "{{ item.group | default(omit) }}"
    ethertype: "{{ item.ethertype | default(omit) }}"
  with_items: "{{ molecule_openstack_ci_security_group_rules }}"

- name: Test for presence of local keypair
  stat:
    path: "{{ molecule_openstack_ci_keypair_path }}"
  register: keypair_local

- name: Delete remote keypair
  os_keypair:
    cloud: "{{ molecule_openstack_ci_cloud }}"
    name: "{{ hashed_keypair_name }}"
    state: absent
  when: not keypair_local.stat.exists

- name: Create keypair
  os_keypair:
    cloud: "{{ molecule_openstack_ci_cloud }}"
    name: "{{ hashed_keypair_name }}"
  register: keypair

- name: Persist the keypair
  copy:
    dest: "{{ molecule_openstack_ci_keypair_path }}"
    content: "{{ keypair.key.private_key }}"
    mode: 0600
  when: keypair.changed  # noqa 503 - We don't want to handler this

- name: Create molecule volume(s)
  os_volume:
    display_name: "{{ item.name }}"
    size: "{{ item.size }}"
  register: volume
  with_items: "{{ molecule_yml.volumes | default([]) }}"
  async: 7200
  poll: 0

- name: Wait for volume(s) to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: vol_jobs
  until: vol_jobs is finished
  retries: 300
  with_items: "{{ volume.results }}"

- name: Create molecule instance(s)
  os_server:
    cloud: "{{ molecule_openstack_ci_cloud }}"
    name: "{{ item.name }}-{{ run_hash }}"
    image: "{{ item.image | default(_cloud.image) }}"
    flavor: "{{ item.flavor | default(_cloud.nova_flavor) }}"
    security_groups: "{{ molecule_openstack_ci_security_group_name }}"
    key_name: "{{ hashed_keypair_name }}"
    volumes: "{{ item.volumes | default(omit) }}"
    delete_fip: true
    nics: "{{ item.nics | default(omit) }}"
    timeout: &timeout 7200
    meta:
      # The generated inventory will still be using the instance name
      # as defined in molecule.yml. Stash the original name in the instance
      # metadata so we can store that in molecule_instance_config, which
      # is used to generate the inventory.
      inventory_name: "{{ item.name }}"
  register: server
  with_items: "{{ molecule_yml.platforms }}"
  async: *timeout
  poll: 0

- name: Wait for instance(s) creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: os_jobs
  until: os_jobs.finished
  retries: 300
  with_items: "{{ server.results }}"

# Mandatory configuration for Molecule to function.
- block:
    - name: Populate instance config dict
      set_fact:
        instance_conf_dict:
          # Pull the original (non-hashed) instance name out of metadata to
          # ensure the molecule-generated inventory matches molecule.yml
          instance: "{{ item.openstack.metadata.inventory_name }}"
          address: "{{ item.openstack.accessIPv4 }}"
          user: "{{ molecule_openstack_ci_ssh_user }}"
          port: "{{ molecule_openstack_ci_ssh_port }}"
          identity_file: "{{ molecule_openstack_ci_keypair_path }}"
      with_items: "{{ os_jobs.results }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results \
                        | map(attribute='ansible_facts.instance_conf_dict') \
                        | list }}"

    - name: Dump instance config
      copy:
        # NOTE(retr0h): Workaround for Ansible 2.2.
        #               https://github.com/ansible/ansible/issues/20885
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml \
                  | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
  when: server.changed | bool

- name: Wait for SSH
  wait_for:
    port: "{{ molecule_openstack_ci_ssh_port }}"
    host: "{{ item.address }}"
    search_regex: SSH
    delay: 10
  with_items: "{{ lookup('file', molecule_instance_config) \
               | molecule_from_yaml }}"
