- name: Log into a Docker registry
  docker_login:
    username: "{{ item.registry.credentials.username }}"
    password: "{{ item.registry.credentials.password }}"
    email: "{{ item.registry.credentials.email | default(omit) }}"
    registry: "{{ item.registry.url }}"
  with_items: "{{ molecule_yml.platforms }}"
  when:
    - item.registry is defined
    - item.registry.credentials is defined
    - item.registry.credentials.username is defined

- name: Create Dockerfiles from image names
  template:
    src: Dockerfile.j2
    dest: >
      {{ molecule_ephemeral_directory }}/Dockerfile_{{ item.image
      | regex_replace('[^a-zA-Z0-9_]', '_') }}
  with_items: "{{ molecule_yml.platforms }}"
  register: platforms

- name: Discover local Docker images
  docker_image_info:
    name: molecule_local/{{ item.item.name }}
  with_items: "{{ platforms.results }}"
  register: docker_images

- name: Build an Ansible compatible image  # noqa 503 (this is complex logic)
  docker_image:
    name: molecule_local/{{ item.item.image }}
    source: build
    build:
      path: "{{ molecule_ephemeral_directory }}"
      dockerfile: >
        {{ item.item.dockerfile
        | default(item.invocation.module_args.dest) }}
      pull: "{{ item.item.pull | default(true) }}"
    force_source: "{{ item.item.force | default(true) }}"
  with_items: "{{ platforms.results }}"
  retries: 3
  until: _molecule_docker_ci_build is success
  register: _molecule_docker_ci_build
  when: >-
    platforms.changed or docker_images.results
    | map(attribute='images')
    | select('equalto', [])
    | list
    | count >= 0

- name: Create docker network(s)
  action: docker_network
  args: "{{ item }}"
  with_items: "{{ molecule_yml.platforms | molecule_get_docker_networks('present', molecule_labels) }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create molecule instance(s)
  docker_container:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    image: molecule_local/{{ item.image }}
    state: started
    recreate: false
    log_driver: json-file
    command: >
      {{ item.command | default('/usr/lib/systemd/systemd --system') }}
    privileged: "{{ item.privileged | default(omit) }}"
    volumes: "{{ item.volumes | default(omit) }}"
    capabilities: "{{ item.capabilities | default(omit) }}"
    exposed_ports: "{{ item.exposed_ports | default(omit) }}"
    published_ports: "{{ item.published_ports | default(omit) }}"
    ulimits: "{{ item.ulimits | default(omit) }}"
    networks: "{{ item.networks | default(omit) }}"
    dns_servers: "{{ item.dns_servers | default(omit) }}"
  register: server
  with_items: "{{ molecule_yml.platforms }}"
  async: 7200
  poll: 0

- name: Wait for instance(s) creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: docker_jobs
  until: docker_jobs is finished
  retries: 300
  with_items: "{{ server.results }}"
